<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Category_Common_Properties" xml:space="preserve">
    <value>Common</value>
  </data>
  <data name="Description_CallMethodAction" xml:space="preserve">
    <value>Calls a method on a specified object when invoked.</value>
  </data>
  <data name="Description_CallMethodAction_MethodName" xml:space="preserve">
    <value>Get or sets the name of the method to invoke.</value>
  </data>
  <data name="Description_CallMethodAction_TargetObject" xml:space="preserve">
    <value>Gets or sets the object that exposes the method.</value>
  </data>
  <data name="Description_ChangePropertyAction" xml:space="preserve">
    <value>An action that will change a specified property to a specified value when invoked.</value>
  </data>
  <data name="Description_ChangePropertyAction_PropertyName" xml:space="preserve">
    <value>Gets or sets the name of the property to change.</value>
  </data>
  <data name="Description_ChangePropertyAction_TargetObject" xml:space="preserve">
    <value>Gets or sets the object whose property will be changed.</value>
  </data>
  <data name="Description_ChangePropertyAction_Value" xml:space="preserve">
    <value>Gets or sets the value to set.</value>
  </data>
  <data name="Description_ControlStoryboardAction" xml:space="preserve">
    <value>An action that will change the state of the specified Storyboard when executed.</value>
  </data>
  <data name="Description_ControlStoryboardAction_ControlStoryboardOption" xml:space="preserve">
    <value>Gets or sets the action to execute on the Storyboard.</value>
  </data>
  <data name="Description_ControlStoryboardAction_Storyboard" xml:space="preserve">
    <value>Gets or sets the targeted Storyboard.</value>
  </data>
  <data name="Description_DataTriggerBehavior" xml:space="preserve">
    <value>A behavior that performs actions when the bound data meets a specified condition.</value>
  </data>
  <data name="Description_DataTriggerBehavior_Actions" xml:space="preserve">
    <value>Gets or sets the collection of actions associated with the behavior.</value>
  </data>
  <data name="Description_DataTriggerBehavior_Binding" xml:space="preserve">
    <value>Gets or sets the bound object that the DataTriggerBehavior will listen to.</value>
  </data>
  <data name="Description_DataTriggerBehavior_ComparisonCondition" xml:space="preserve">
    <value>Gets or sets the type of comparison to be performed between Binding and Value.</value>
  </data>
  <data name="Description_DataTriggerBehavior_Value" xml:space="preserve">
    <value>Gets or sets the value to be compared with the value of Binding.</value>
  </data>
  <data name="Description_EventTriggerBehavior" xml:space="preserve">
    <value>A behavior that listens for a specified event on its source and executes its actions when that event is fired.</value>
  </data>
  <data name="Description_EventTriggerBehavior_Actions" xml:space="preserve">
    <value>Gets or sets the collection of actions associated with the behavior.</value>
  </data>
  <data name="Description_EventTriggerBehavior_EventName" xml:space="preserve">
    <value>Gets or sets the name of the event to listen for.</value>
  </data>
  <data name="Description_EventTriggerBehavior_SourceObject" xml:space="preserve">
    <value>Gets or sets the source object from which this behavior listens for events. If SourceObject is not set, the source will default to AssociatedObject.</value>
  </data>
  <data name="Description_GoToStateAction" xml:space="preserve">
    <value>An action that will transition a FrameworkElement to a specified VisualState when executed.</value>
  </data>
  <data name="Description_GoToStateAction_StateName" xml:space="preserve">
    <value>Gets or sets the name of the VisualState.</value>
  </data>
  <data name="Description_GoToStateAction_TargetObject" xml:space="preserve">
    <value>Gets or sets the target object.</value>
  </data>
  <data name="Description_GoToStateAction_UseTransitions" xml:space="preserve">
    <value>Gets or sets whether or not to use a VisualTransition to transition between states.</value>
  </data>
  <data name="Description_IncrementalUpdateBehavior" xml:space="preserve">
    <value>A behavior that allows incremental updating of ListView and GridView contents to support faster updating. By attaching this behavior to elements in the ItemTemplate used by these views, some of the updates can be deferred until there is render time available, resulting in a smoother experience.</value>
  </data>
  <data name="Description_IncrementalUpdateBehavior_Phase" xml:space="preserve">
    <value>Gets or sets the relative priority of this incremental update. Lower Phase values are addressed first.</value>
  </data>
  <data name="Description_InvokeCommandAction" xml:space="preserve">
    <value>Executes a specified ICommand when invoked.</value>
  </data>
  <data name="Description_InvokeCommandAction_Command" xml:space="preserve">
    <value>Gets or sets the command the action should invoke.</value>
  </data>
  <data name="Description_InvokeCommandAction_CommandParameter" xml:space="preserve">
    <value>Gets or sets the parameter that is passed to ICommand.Execute. If this is not set, the parameter from the InvokeCommandAction.Execute method will be used.</value>
  </data>
  <data name="Description_InvokeCommandAction_InputConverter" xml:space="preserve">
    <value>Gets or sets the converter that is run on the parameter of the InvokeCommandAction.Execute method.</value>
  </data>
  <data name="Description_InvokeCommandAction_InputConverterLanguage" xml:space="preserve">
    <value>Gets or sets the language that is passed to the IValueConverter.Convert method of InputConverter.</value>
  </data>
  <data name="Description_InvokeCommandAction_InputConverterParameter" xml:space="preserve">
    <value>Gets or sets the parameter that is passed to the IValueConverter.Convert method of InputConverter.</value>
  </data>
  <data name="Description_NavigateToPageAction" xml:space="preserve">
    <value>An action that switches the current visual to the specified Page.</value>
  </data>
  <data name="Description_NavigateToPageAction_Parameter" xml:space="preserve">
    <value>Gets or sets the parameter that will be passed to the Frame.Navigate method.</value>
  </data>
  <data name="Description_NavigateToPageAction_TargetPage" xml:space="preserve">
    <value>Gets or sets the fully qualified name of the Page to navigate to.</value>
  </data>
  <data name="Description_PlaySoundAction" xml:space="preserve">
    <value>An action that will play a sound to completion.</value>
  </data>
  <data name="Description_PlaySoundAction_Source" xml:space="preserve">
    <value>Gets or sets the location of the sound file.</value>
  </data>
  <data name="Description_PlaySoundAction_Volume" xml:space="preserve">
    <value>Gets or set the volume of the sound.</value>
  </data>
  <data name="Category_Name_Actions" xml:space="preserve">
    <value>Actions</value>
    <comment>The name in the property inspector for the category that shows Windows XAML ActionCollections.</comment>
  </data>
</root>